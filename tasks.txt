Требуется написать программу на языке C/C++ для ОС Windows, которая
должна из себя представлять аналог утилиты dir, реализованной с 
помощью подобия клиент­серверной модели (клиентская и серверная 
части могут быть реализованы в одном запускаемом файле – 
последовательный запуск двух копий) с передачей данных между друг 
другом по именованному каналу (named pipe).
Задача серверной части состоит в том, что он принимает имя каталога, а отправляет 
ответ, состоящий из информации о содержащихся в переданном каталоге файлах и 
каталогах, а именно: имя, дата последней модификации, размер и отдельную отметку 
для каталогов (о том, что это каталог).
Задача клиентской части состоит в том, что он принимает от пользователя имя 
каталога в качестве аргумента (не интерактивный ввод) (без аргумента – текущий 
каталог) и передает эту информацию серверу, а после обработки запроса сервером 
клиент получает информацию­результат и выводит ее на стандартный вывод в виде 4­
х столбцов.
Вывод информации производить на стандартный вывод (stdout), каждая запись будь 
то файл или каталог отделяется символом новой строки. После вывода клиентская 
часть обязана завершиться, а серверная завершает свою работу только по команде 
пользователя: нажатие клавиши «q» и/или сигнал SIGINT. В случае возникновения 
ошибок (например, несуществующий или недоступный каталог, отсутствие рабочей 
серверной части и так далее) следует вывести сообщение с описанием ошибки на 
стандартный поток ошибок (stderr).
Также возможно использование одиночного аргумента “­h”, при получении которого 
программа должна вывести справку и описание выполняемой задачи, а также 
автора(ов).
Имена системных вызовов и типов данных рекомендуемых для использования:
● FindFirstFile
● FindNextFile
● WIN32_FIND_DATA
● CreateFile
● CreateNamedPipe
● ConnectNamedPipe
● ReadFromPipe
● WriteFile
● DisconnectNamedPipe
● CloseHandle
● perror

2.    Требуется написать программу на языке C/C++ для ОС Linux, которая 
должна из себя представлять аналог утилиты ls, реализованной с 
помощью подобия клиент­серверной модели: клиентская и серверная 
части реализованы в одном запускаемом файле, запуск второй части 
производится с помощью системного вызова fork из первой части, 
передача данных между частями производится по каналу (pipe).
Задача серверной части состоит в том, что он принимает имя каталога, а отправляет 
ответ, состоящий из информации о содержащихся в переданном каталоге файлах и 
каталогах, а именно: имя, дата последней модификации, размер и отдельную отметку 
для каталогов (о том, что это каталог).
Задача клиентской части состоит в том, что он принимает от пользователя имя 
каталога в качестве аргумента (не интерактивный ввод) (без аргумента – текущий 
каталог) и передает эту информацию серверу, а после обработки запроса сервером 
клиент получает информацию­результат и выводит ее на стандартный вывод в виде 4­
х столбцов.
Вывод информации производить на стандартный вывод (stdout), каждая запись будь 
то файл или каталог отделяется символом новой строки. После вывода программа 
обязана завершиться. В случае возникновения ошибок (например, несуществующий 
или недоступный каталог и так далее) следует вывести сообщение с описанием 
ошибки на стандартный поток ошибок (stderr).
Также возможно использование одиночного аргумента “­h”, при получении которого 
программа должна вывести справку и описание выполняемой задачи, а также 
автора(ов).
Имена системных вызовов и типов данных рекомендуемых для использования:
● DIR
● struct dirent
● struct stat
● chdir
● opendir
● readdir
● closedir
● stat или lstat или fstat
● pipe
● write
● read
● close
● fork
● perror

3.    Требуется написать программу на языке C/C++ для ОС Linux, которая 
копирует указанный файл через область общей памяти размером 1 КБайт 
блоками по 128 Байт, реализованной с помощью подобия 
клиент серверной модели.
Задача клиентской части состоит в том, что он принимает от пользователя имя файла 
в качестве аргумента (не интерактивный ввод) и по возможности передает 
содержимого файла серверной части через область общей памяти.
Задача серверной части состоит в том, что он принимает от пользователя имя нового 
файла в качестве аргумента (не интерактивный ввод) и по возможности получает 
содержимое файла через область общей памяти и сохраняет его на диске под 
указанным именем (переданное имя может являться как абсолютным, так и 
относительным).
Использовать семафоры следует в классическом понимании (3 функции: занание 
начального значения, уменьшение на 1, увеличение значения на 1).
Для решения данной задачи нужно решить проблему “Производитель и потребитель”
Вывод сообщений производить на стандартный вывод (stdout). После выполнения 
задачи клиентская и серверная части обязаны завершиться, также доступно 
аварийное завершение работы частей по сигналу SIGINT. В случае возникновения 
ошибок (например, несуществующий или недоступный файл, отсутствие рабочей 
серверной части и так далее) следует вывести сообщение с описанием ошибки на 
стандартный поток ошибок (stderr).
Также возможно использование одиночного аргумента “­h”, при получении которого 
программа должна вывести справку и описание выполняемой задачи, а также 
автора(ов).
Имена системных вызовов и типов данных рекомендуемых для использования:
● struct sembuf
● semget
● semctl
● semop
● shmget
● shmat
● shmctl
● shmdt
● ftok
● perror
